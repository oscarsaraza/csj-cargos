generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  csj
  deaj
  external
}

model User {
  id                          String                     @id @default(auto()) @map("_id") @db.ObjectId
  username                    String                     @unique
  password                    String
  passwordExpiresAt           DateTime
  sessions                    Session[]
  enlacesCsj                  EnlaceCsj[]
  enlacesDeaj                 EnlaceDeaj[]
  role                        UserRole                   @default(external)
  datosUdaeActoAdministrativo EnlaceActoAdministrativo[]
}

model Session {
  id        String   @id @default(cuid()) @map("_id")
  expiresAt DateTime
  userId    String   @db.ObjectId
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  username  String
}

model DatosUdae {
  id                              String                    @id @default(auto()) @map("_id") @db.ObjectId
  actoAdministrativoModificatorio String?
  anioActoAdministrativo          Int?
  circuitoJudicial                String
  codigoInterno                   Int?
  consejoSeccional                String
  denominacionInicial             String?
  dependencia                     String
  descripcionCargo                String
  direccionSeccional              String
  distritoJudicial                String
  especialidad                    String
  gradoCargo                      String
  gradoInicial                    String?
  jurisdiccion                    String
  municipioSedeFisica             String
  nombreDespacho                  String
  numero                          Int
  numeroActoAdministrativo        String?
  observaciones                   String?
  subespecialidad                 String
  tipoActoAdministrativo          String?
  enlaceCsj                       EnlaceCsj?
  enlaceDeaj                      EnlaceDeaj?
  datosActoAdministrativo         EnlaceActoAdministrativo?
  datosEncuesta                   DatosEncuesta?
}

model EnlaceCsj {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  datosUdaeId String    @unique @db.ObjectId
  datosUdae   DatosUdae @relation(fields: [datosUdaeId], references: [id])
  datosCsjId  String    @unique @db.ObjectId
  datosCsj    DatosCsj  @relation(fields: [datosCsjId], references: [id])
}

model DatosCsj {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  acuerdo           String?
  cargo             String
  cedula            String?
  circuito          String
  codigoDespacho    String
  condicionEspecial String
  depacho           String
  escalafon         String?
  estadoActual      String
  estadoVacante     String
  genero            String?
  municipio         String
  nivel             String?
  numero            String
  observaciones     String?
  propiedad         String?
  provisionalidad   String?
  tramitePendiente  String?
  enlace            EnlaceCsj?
}

model EnlaceDeaj {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  datosUdaeId String     @unique @db.ObjectId
  datosUdae   DatosUdae  @relation(fields: [datosUdaeId], references: [id])
  datosDeajId String?    @unique @db.ObjectId
  datosDeaj   DatosDeaj? @relation(fields: [datosDeajId], references: [id])
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])

  @@unique([datosUdaeId, datosDeajId])
}

model DatosDeaj {
  id                              String      @id @default(auto()) @map("_id") @db.ObjectId
  cargoProvisional                String?
  cargoTitular                    String
  ciudadUbicacionLaboral          String?
  claseNombramiento               String?
  codCargoProvisional             String?
  codCargoTitular                 String
  codDependenciaProvisional       String?
  codDependenciaTitular           String
  codigoUnidadEjecutora           String
  dependenciaProvisional          String?
  dependenciaTitular              String
  fechaContinuidad                String?
  fechaFin                        String?
  fechaIngresoSeccional           String?
  fechaInicial                    String?
  fechaInicio                     String?
  fechaRetiro                     String?
  fechaRetiroSeccional            String?
  idOcurrenciaTitular             String?
  naturaleza                      String?
  naturalezaOcurrenciaProvisional String?
  nomDocumentoReemplazo           String?
  nombreReemplazo                 String?
  nombreRef                       String?
  numDocumento                    String?
  numDocumentoRef                 String?
  numVinculacion                  String?
  numVinculacionReemplazo         String?
  ocurrenciaProvisional           String?
  refNumVinculacion               String?
  regimenSalarial                 String?
  registro                        String?
  servidor                        String
  unidadEjecutora                 String
  vinculacionNovedad              String?
  enlace                          EnlaceDeaj?
}

enum TipoActoAdministrativo {
  LEY
  DECRETO
  ACUERDO
  ACUERDO_SALA
}

model ActoAdministrativo {
  id          String                     @id @default(auto()) @map("_id") @db.ObjectId
  tipo        TipoActoAdministrativo
  anio        String
  numero      String
  enlacesUdae EnlaceActoAdministrativo[]

  @@unique([tipo, anio, numero])
}

model EnlaceActoAdministrativo {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime           @default(now())
  userId               String             @db.ObjectId
  user                 User               @relation(fields: [userId], references: [id])
  datosUdaeId          String             @unique @db.ObjectId
  datosUdae            DatosUdae          @relation(fields: [datosUdaeId], references: [id])
  actoAdministrativoId String             @db.ObjectId
  actoAdministrativo   ActoAdministrativo @relation(fields: [actoAdministrativoId], references: [id])
  // Si cuando el tipo de acto, número y año coinciden con los datos de la UDAE, No en caso contrario
  actoCorrecto         String
  articulo             String
  literal              String?
  numeral              String?
  // Todas las profesiones que solicita el perfil del cargo del acto administrativo.
  perfilCargo          String
}

model DatosEncuesta {
  id                         String    @id @default(auto()) @map("_id") @db.ObjectId
  // Cédula de ciudadanía, Cédula de extranjería, Número Único de Identificación Personal (NUIP)
  tipoDocumento              String
  documento                  String
  // Bachiller, Tecnólogo, Técnico, Profesional, Pos grado, Doctorado, Pos doctorado
  nivelEscolaridad           String
  // Número de familiares dependientes con los que convive (1er grado de consanguinidad/afinidad)
  familiaresDependientes     Int
  profesion2                 String
  profesion3                 String
  observaciones              String    @default("")
  tipoDocumentoProv          String?
  cedulaProv                 String?
  nivelEscolaridadProv       String?
  familiaresDependientesProv Int?
  datosUdaeId                String    @unique @db.ObjectId
  datosUdae                  DatosUdae @relation(fields: [datosUdaeId], references: [id])
}
